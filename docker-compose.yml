version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  
  # portainer:
  #   # launch portainer
  #   image: portainer/portainer
  #   container_name: "portainer"
  #   # restart: always
  #   # ports:
  #   #   - "8000:8000"
  #   #   - "9000:9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.portainer.rule=Host(`portainer.${traefikhost}`)"
  #     # - "traefik.http.routers.portainer.rule=Path(`/check`)"
  #     - "traefik.http.routers.portainer.entrypoints=web"
  #     # Uncomment this label if your Traefik instance is using a specific Docker network and replace the network name 
  #     # This is not necessary if you set your default network in Traefik config/parameters
  #     # - "traefik.docker.network=your-traefik-network-name"

  api:
    build: api/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${traefikhost}`)"

  indra:
    image: labsyspharm/indra
    command: python /sw/indra/rest_api/api.py
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.indra.rule=Host(`indra.${traefikhost}`)"
      - "traefik.http.services.indra.loadbalancer.server.port=8080"

  grlc:
    image: clariah/grlc
    environment:
      - "GRLC_SERVER_NAME=grlc.io"
      - "GRLC_GITHUB_ACCESS_TOKEN=xxx" # Your token
      - "GRLC_SPARQL_ENDPOINT=http://dbpedia.org/sparql"
      - "DEBUG=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grlc.rule=Host(`grlc.${traefikhost}`)"

  es:
    build: elasticsearch/
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      - "ES_JAVA_OPTS=-Xmx4024m -Xms4024m"
    ulimits:
       memlock:
         soft: -1
         hard: -1
    volumes:
      - ./data/elastic:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./data/original:/exchange
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.es.rule=Host(`es.${traefikhost}`)"
      - "traefik.http.services.es.loadbalancer.server.port=9200"
  
  jupyter:
    image: jupyter/base-notebook
    volumes:
      - ./data/repo:/home/jovyan/work
    user:
      "root"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.${traefikhost}`)"
      - "traefik.http.routers.jupyter.entrypoints=web"

  sparql:
    image: tenforce/virtuoso:1.3.1-virtuoso7.2.2
    environment:
      SPARQL_UPDATE: "true"
      DEFAULT_GRAPH: "http://www.example.com/my-graph"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sparql.rule=Host(`sparql.${traefikhost}`)"
      - "traefik.http.routers.sparql.entrypoints=web"
      - "traefik.http.services.sparql.loadbalancer.server.port=8890"
    volumes:
      - ./data/virtuoso:/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    environment:
      ELASTICSEARCH_HOSTS: http://search.coronawhy.org
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${traefikhost}`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${traefikhost}`)"
      #- "traefik.http.routers.whoami.rule=Path(`/check`)"

      #- "traefik.http.middlewares.add-foo.addprefix.prefix=/check"

  doccano:
    image: "coronawhy/doccano"
    container_name: "doccano"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.doccano.entrypoints=web"
      - "traefik.http.routers.doccano.rule=Host(`doccano.${traefikhost}`)"

  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
          max-size: 10m
          max-file: "3"

  airflow:
    image: puckel/docker-airflow:1.10.9
    container_name: airflow
    restart: always
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/usr/local/airflow/dags
      - ./plugins:/usr/local/airflow/plugins
    # ports:
        # - "8080:8080"
    command: webserver
    healthcheck:
        test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
        interval: 30s
        timeout: 30s
        retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airflow.entrypoints=web"
      - "traefik.http.services.airflow.loadbalancer.server.port=8080"
      - "traefik.http.routers.airflow.rule=Host(`airflow.${traefikhost}`)"



#volumes:
#  portainer_data:
